use super::attribute::{Accent, DisplayStyle, MathVariant, TextTransform};

const NORMAL: Option<MathVariant> = Some(MathVariant::Normal);

#[derive(Debug, Clone, PartialEq)]
pub enum Token {
    Illegal(char),
    EOF,
    Begin,
    End,
    Ampersand,
    NewLine,
    Left,
    Right,
    Middle,
    Paren(&'static str),
    LBrace,
    RBrace,
    Frac(Option<DisplayStyle>),
    Underscore,
    Circumflex,
    Binom(Option<DisplayStyle>),
    Overset,
    Underset,
    Overbrace(char),
    Underbrace(char),
    Sqrt,
    Integral(char),
    Lim(&'static str),
    Space(f32),
    NonBreakingSpace,
    Style(TextTransform),
    NormalVariant,
    Big(&'static str),
    Over(char, Accent),
    Under(char, Accent),
    Operator(char),
    BigOp(char),
    Letter(char, Option<MathVariant>),
    Number(String),
    Function(&'static str),
    OperatorName,
    Slashed,
    Text,
    Command(String),
}

impl Token {
    pub(crate) fn acts_on_a_digit(&self) -> bool {
        match self {
            Token::Sqrt | Token::Frac(_) | Token::Binom(_) | Token::Style(_) => true,
            _ => false,
        }
    }

    pub fn from_command(command: &str) -> Token {
        match command {
            "mathrm" => Token::NormalVariant,
            "textit" => Token::Style(TextTransform::Italic),
            "mathit" => Token::Style(TextTransform::Italic),
            "mathcal" => Token::Style(TextTransform::Script),
            "textbf" => Token::Style(TextTransform::Bold),
            "mathbf" => Token::Style(TextTransform::Bold),
            "bm" => Token::Style(TextTransform::BoldItalic),
            "symbf" => Token::Style(TextTransform::BoldItalic),
            "mathbb" => Token::Style(TextTransform::DoubleStruck),
            "mathfrak" => Token::Style(TextTransform::Fraktur),
            "mathscr" => Token::Style(TextTransform::Script),
            "mathsf" => Token::Style(TextTransform::SansSerif),
            "texttt" => Token::Style(TextTransform::Monospace),
            "boldsymbol" => Token::Style(TextTransform::BoldItalic),
            "text" => Token::Text,
            "sqrt" => Token::Sqrt,
            "frac" => Token::Frac(None),
            "tfrac" => Token::Frac(Some(DisplayStyle::False)),
            "dfrac" => Token::Frac(Some(DisplayStyle::True)),
            "left" => Token::Left,
            "right" => Token::Right,
            "middle" => Token::Middle,
            "begin" => Token::Begin,
            "end" => Token::End,
            "\\" => Token::NewLine,
            "binom" => Token::Binom(None),
            "tbinom" => Token::Binom(Some(DisplayStyle::False)),
            "dbinom" => Token::Binom(Some(DisplayStyle::True)),
            "overset" => Token::Overset,
            "underset" => Token::Underset,
            "overbrace" => Token::Overbrace('\u{23de}'),
            "underbrace" => Token::Underbrace('\u{23df}'),
            "overparen" => Token::Overbrace('\u{23dc}'),
            "underparen" => Token::Underbrace('\u{23dd}'),
            "overbracket" => Token::Overbrace('\u{23b4}'),
            "underbracket" => Token::Underbrace('\u{23b5}'),
            "!" => Token::Space(-3. / 18.),
            "," => Token::Space(3. / 18.),
            ":" => Token::Space(4. / 18.),
            ";" => Token::Space(5. / 18.),
            " " => Token::Space(1.),
            "quad" => Token::Space(1.),
            "qquad" => Token::Space(2.),
            "langle" => Token::Paren("〈"),
            "rangle" => Token::Paren("〉"),
            "{" => Token::Paren("{"),
            "}" => Token::Paren("}"),
            "lceil" => Token::Paren("⌈"),
            "rceil" => Token::Paren("⌉"),
            "lfloor" => Token::Paren("⌊"),
            "rfloor" => Token::Paren("⌋"),
            "lgroup" => Token::Paren("⦗"),
            "rgroup" => Token::Paren("⦘"),
            "llbracket" => Token::Paren("⟦"),
            "rrbracket" => Token::Paren("⟧"),
            "lim" => Token::Lim("lim"),
            "liminf" => Token::Lim("lim inf"),
            "limsup" => Token::Lim("lim sup"),
            "min" => Token::Lim("min"),
            "max" => Token::Lim("max"),
            "inf" => Token::Lim("inf"),
            "sup" => Token::Lim("sup"),
            "int" => Token::Integral('∫'),
            "iint" => Token::Integral('∬'),
            "iiint" => Token::Integral('∭'),
            "oint" => Token::Integral('∮'),
            "dot" => Token::Over('\u{02d9}', Accent::True),
            "ddot" => Token::Over('¨', Accent::True),
            "bar" => Token::Over('¯', Accent::True),
            "hat" => Token::Over('^', Accent::True),
            "check" => Token::Over('ˇ', Accent::True),
            "breve" => Token::Over('˘', Accent::True),
            "acute" => Token::Over('´', Accent::True),
            "grave" => Token::Over('`', Accent::True),
            "tilde" => Token::Over('~', Accent::True),
            "vec" => Token::Over('→', Accent::True),
            "overline" => Token::Over('_', Accent::True),
            "underline" => Token::Under('_', Accent::True),
            "widehat" => Token::Over('^', Accent::True),
            "widetilde" => Token::Over('~', Accent::True),
            "overrightarrow" => Token::Over('→', Accent::True),
            "overleftarrow" => Token::Over('←', Accent::True),
            "sum" => Token::BigOp('∑'),
            "prod" => Token::BigOp('∏'),
            "coprod" => Token::BigOp('∐'),
            "bigcap" => Token::BigOp('⋂'),
            "bigcup" => Token::BigOp('⋃'),
            "bigsqcup" => Token::BigOp('⨆'),
            "bigvee" => Token::BigOp('⋁'),
            "bigwedge" => Token::BigOp('⋀'),
            "bigodot" => Token::BigOp('⨀'),
            "bitotimes" => Token::BigOp('⨂'),
            "bigoplus" => Token::BigOp('⨁'),
            "biguplus" => Token::BigOp('⨄'),
            "bigl" => Token::Big("1.2em"),
            "bigr" => Token::Big("1.2em"),
            "Bigl" => Token::Big("1.623em"),
            "Bigr" => Token::Big("1.623em"),
            "biggl" => Token::Big("2.047em"),
            "biggr" => Token::Big("2.047em"),
            "Biggl" => Token::Big("2.470em"),
            "Biggr" => Token::Big("2.470em"),
            // <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
            //   <semantics>
            //     <mrow>
            //         <mi>a</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="2.470em" minsize="2.470em">(</mo></ mrow>
            //         <mi>b</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="2.047em" minsize="2.047em">(</mo></mrow>
            //         <mi>c</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="1.623em" minsize="1.623em">(</mo></mrow>
            //         <mi>d</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="1.2em" minsize="1.2em">(</mo></mrow>
            //         <mi>e</mi>
            //         <mo stretchy="false">(</mo>
            //         <mi>f</mi>
            //         <mo>+</mo>
            //         <mi>g</mi>
            //         <mo stretchy="false">)</mo>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="1.2em" minsize="1.2em">)</mo></mrow>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="1.623em" minsize="1.623em">)</mo></mrow>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="2.047em" minsize="2.047em">)</mo></mrow>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="2.470em" minsize="2.470em">)</mo></mrow>
            //   </semantics>
            // </math>
            "sin" => Token::Function("sin"),
            "cos" => Token::Function("cos"),
            "tan" => Token::Function("tan"),
            "csc" => Token::Function("csc"),
            "sec" => Token::Function("sec"),
            "cot" => Token::Function("cot"),
            "arcsin" => Token::Function("arcsin"),
            "arccos" => Token::Function("arccos"),
            "arctan" => Token::Function("arctan"),
            "sinh" => Token::Function("sinh"),
            "cosh" => Token::Function("cosh"),
            "tanh" => Token::Function("tanh"),
            "coth" => Token::Function("coth"),
            "exp" => Token::Function("exp"),
            "ln" => Token::Function("ln"),
            "log" => Token::Function("log"),
            "erf" => Token::Function("erf"),
            "erfc" => Token::Function("erfc"),
            "arg" => Token::Function("arg"),
            "ker" => Token::Function("ker"),
            "dim" => Token::Function("dim"),
            "det" => Token::Function("det"),
            "wp" => Token::Function("℘"),
            "operatorname" => Token::OperatorName,
            "Alpha" => Token::Letter('Α', NORMAL),
            "alpha" => Token::Letter('α', None),
            "Beta" => Token::Letter('Β', NORMAL),
            "beta" => Token::Letter('β', None),
            "Gamma" => Token::Letter('Γ', NORMAL),
            "gamma" => Token::Letter('γ', None),
            "digamma" => Token::Letter('ϝ', None),
            "Delta" => Token::Letter('Δ', NORMAL),
            "delta" => Token::Letter('δ', None),
            "Epsilon" => Token::Letter('Ε', NORMAL),
            "epsilon" => Token::Letter('ϵ', None),
            "varepsilon" => Token::Letter('ε', None),
            "Zeta" => Token::Letter('Ζ', NORMAL),
            "zeta" => Token::Letter('ζ', None),
            "Eta" => Token::Letter('Η', NORMAL),
            "eta" => Token::Letter('η', None),
            "Theta" => Token::Letter('Θ', NORMAL),
            "theta" => Token::Letter('θ', None),
            "vartheta" => Token::Letter('ϑ', None),
            "Iota" => Token::Letter('Ι', NORMAL),
            "iota" => Token::Letter('ι', None),
            "Kappa" => Token::Letter('Κ', NORMAL),
            "kappa" => Token::Letter('κ', None),
            "Lambda" => Token::Letter('Λ', NORMAL),
            "lambda" => Token::Letter('λ', None),
            "Mu" => Token::Letter('Μ', NORMAL),
            "mu" => Token::Letter('μ', None),
            "Nu" => Token::Letter('Ν', NORMAL),
            "nu" => Token::Letter('ν', None),
            "Xi" => Token::Letter('Ξ', NORMAL),
            "xi" => Token::Letter('ξ', None),
            "Omicron" => Token::Letter('Ο', NORMAL),
            "omicron" => Token::Letter('ο', None),
            "Pi" => Token::Letter('Π', NORMAL),
            "pi" => Token::Letter('π', None),
            "varpi" => Token::Letter('ϖ', None),
            "Rho" => Token::Letter('Ρ', NORMAL),
            "rho" => Token::Letter('ρ', None),
            "varrho" => Token::Letter('ϱ', None),
            "Sigma" => Token::Letter('Σ', NORMAL),
            "sigma" => Token::Letter('σ', None),
            "varsigma" => Token::Letter('ς', None),
            "Tau" => Token::Letter('Τ', NORMAL),
            "tau" => Token::Letter('τ', None),
            "Upsilon" => Token::Letter('Υ', NORMAL),
            "upsilon" => Token::Letter('υ', None),
            "Phi" => Token::Letter('Φ', NORMAL),
            "phi" => Token::Letter('ϕ', None),
            "varphi" => Token::Letter('φ', None),
            "Chi" => Token::Letter('Χ', NORMAL),
            "chi" => Token::Letter('χ', None),
            "Psi" => Token::Letter('Ψ', NORMAL),
            "psi" => Token::Letter('ψ', None),
            "Omega" => Token::Letter('Ω', NORMAL),
            "omega" => Token::Letter('ω', None),
            "aleph" => Token::Letter('ℵ', NORMAL),
            "beth" => Token::Letter('ℶ', NORMAL),
            "gimel" => Token::Letter('ℷ', NORMAL),
            "daleth" => Token::Letter('ℸ', NORMAL),
            "A" => Token::Letter('Å', NORMAL),
            "a" => Token::Letter('å', NORMAL),
            "AE" => Token::Letter('Æ', NORMAL),
            "ae" => Token::Letter('æ', NORMAL),
            "DH" => Token::Letter('Ð', NORMAL),
            "dh" => Token::Letter('ð', NORMAL),
            "dj" => Token::Letter('đ', NORMAL),
            "L" => Token::Letter('Ł', NORMAL),
            "l" => Token::Letter('ł', NORMAL),
            "NG" => Token::Letter('Ŋ', NORMAL),
            "ng" => Token::Letter('ŋ', NORMAL),
            "O" => Token::Letter('Ø', NORMAL),
            "o" => Token::Letter('ø', NORMAL),
            "OE" => Token::Letter('Œ', NORMAL),
            "oe" => Token::Letter('œ', NORMAL),
            "ss" => Token::Letter('ß', NORMAL),
            "TH" => Token::Letter('Þ', NORMAL),
            "th" => Token::Letter('þ', NORMAL),
            "imath" => Token::Letter('ı', None),
            "jmath" => Token::Letter('ȷ', None),
            "ell" => Token::Letter('ℓ', None),
            "hbar" => Token::Letter('ℏ', None),
            "hslash" => Token::Letter('ℏ', None),
            "infty" => Token::Letter('∞', NORMAL),
            "mho" => Token::Letter('℧', NORMAL),
            "Finv" => Token::Letter('Ⅎ', NORMAL),
            "Re" => Token::Letter('ℜ', NORMAL),
            "Im" => Token::Letter('ℑ', NORMAL),
            "complement" => Token::Letter('∁', NORMAL),
            "emptyset" => Token::Letter('∅', NORMAL),
            "varnothing" => Token::Letter('ø', None),
            "therefore" => Token::Letter('∴', NORMAL),
            "because" => Token::Letter('∵', NORMAL),
            "Diamond" => Token::Letter('◊', NORMAL),
            "Box" => Token::Letter('◻', NORMAL),
            "triangle" => Token::Letter('△', NORMAL),
            "angle" => Token::Letter('∠', NORMAL),
            "dagger" => Token::Letter('†', NORMAL),
            "dag" => Token::Letter('†', NORMAL),
            "Dagger" => Token::Letter('‡', NORMAL),
            "ddag" => Token::Letter('‡', NORMAL),
            "And" => Token::Letter('&', NORMAL),
            "eth" => Token::Letter('ð', NORMAL),
            "S" => Token::Letter('§', NORMAL),
            "P" => Token::Letter('¶', NORMAL),
            "%" => Token::Letter('%', NORMAL),
            "_" => Token::Letter('_', NORMAL),
            "&" => Token::Letter('&', NORMAL),
            "#" => Token::Letter('#', NORMAL),
            "$" => Token::Letter('$', NORMAL),
            "copyright" => Token::Letter('©', NORMAL),
            "checkmark" => Token::Letter('✓', NORMAL),
            "circledR" => Token::Letter('Ⓡ', NORMAL),
            "maltese" => Token::Letter('✠', NORMAL),
            "colon" => Token::Letter(':', NORMAL),
            "bigtriangleup" => Token::Letter('△', NORMAL),
            "sphericalangle" => Token::Letter('∢', NORMAL),
            "square" => Token::Letter('□', NORMAL),
            "lozenge" => Token::Letter('◊', NORMAL),
            "diamondsuit" => Token::Letter('♢', NORMAL),
            "heartsuit" => Token::Letter('♡', NORMAL),
            "clubsuit" => Token::Letter('♣', NORMAL),
            "spadesuit" => Token::Letter('♠', NORMAL),
            "Game" => Token::Letter('⅁', NORMAL),
            "flat" => Token::Letter('♭', NORMAL),
            "natural" => Token::Letter('♮', NORMAL),
            "sharp" => Token::Letter('♯', NORMAL),
            "pounds" => Token::Letter('£', NORMAL),
            "textyen" => Token::Letter('¥', NORMAL),
            "euro" => Token::Letter('€', NORMAL),
            "rupee" => Token::Letter('₹', NORMAL),
            "sun" => Token::Letter('☼', NORMAL),
            "mercury" => Token::Letter('☿', NORMAL),
            "venus" => Token::Letter('♀', NORMAL),
            "earth" => Token::Letter('♁', NORMAL),
            "mars" => Token::Letter('♂', NORMAL),
            "jupiter" => Token::Letter('♃', NORMAL),
            "saturn" => Token::Letter('♄', NORMAL),
            "uranus" => Token::Letter('♅', NORMAL),
            "neptune" => Token::Letter('♆', NORMAL),
            "astrosun" => Token::Letter('☉', NORMAL),
            "ascnode" => Token::Letter('☊', NORMAL),
            "times" => Token::Operator('×'),
            "oplus" => Token::Operator('⊕'),
            "ominus" => Token::Operator('⊖'),
            "otimes" => Token::Operator('⊗'),
            "oslash" => Token::Operator('⊘'),
            "odot" => Token::Operator('⊙'),
            "bigcirc" => Token::Operator('◯'),
            "amalg" => Token::Operator('⨿'),
            "pm" => Token::Operator('±'),
            "mp" => Token::Operator('∓'),
            "cdot" => Token::Operator('·'),
            "cdots" => Token::Operator('⋯'),
            "vdots" => Token::Operator('⋮'),
            "ldots" => Token::Operator('…'),
            "ddots" => Token::Operator('⋱'),
            "circ" => Token::Operator('∘'),
            "bullet" => Token::Operator('∙'),
            "star" => Token::Operator('⋆'),
            "div" => Token::Operator('÷'),
            "lnot" => Token::Operator('¬'),
            "neg" => Token::Operator('¬'),
            "land" => Token::Operator('∧'),
            "lor" => Token::Operator('∨'),
            "sim" => Token::Operator('∼'),
            "simeq" => Token::Operator('≃'),
            "nsim" => Token::Operator('≁'),
            "cong" => Token::Operator('≅'),
            "approx" => Token::Operator('≈'),
            "ne" => Token::Operator('≠'),
            "neq" => Token::Operator('≠'),
            "equiv" => Token::Operator('≡'),
            "nequiv" => Token::Operator('≢'),
            "prec" => Token::Operator('≺'),
            "succ" => Token::Operator('≻'),
            "preceq" => Token::Operator('⪯'),
            "succeq" => Token::Operator('⪰'),
            "dashv" => Token::Operator('⊣'),
            "asymp" => Token::Operator('≍'),
            "doteq" => Token::Operator('≐'),
            "propto" => Token::Operator('∝'),
            "barwedge" => Token::Operator('⊼'),
            "ltimes" => Token::Operator('⋉'),
            "rtimes" => Token::Operator('⋊'),
            "Join" => Token::Operator('⋈'),
            "lhd" => Token::Operator('⊲'),
            "rhd" => Token::Operator('⊳'),
            "unlhd" => Token::Operator('⊴'),
            "unrhd" => Token::Operator('⊵'),
            "vee" => Token::Operator('∨'),
            "uplus" => Token::Operator('⊎'),
            "wedge" => Token::Operator('∧'),
            "boxdot" => Token::Operator('⊡'),
            "boxplus" => Token::Operator('⊞'),
            "boxminus" => Token::Operator('⊟'),
            "boxtimes" => Token::Operator('⊠'),
            "boxbox" => Token::Operator('⧈'),
            "boxslash" => Token::Operator('⧄'),
            "boxbslash" => Token::Operator('⧅'),
            "Cap" => Token::Operator('⋒'),
            "Cup" => Token::Operator('⋓'),
            "centerdot" => Token::Operator('∙'),
            "circledast" => Token::Operator('⊛'),
            "circledcirc" => Token::Operator('⊚'),
            "circleddash" => Token::Operator('⊝'),
            "curlyvee" => Token::Operator('⋎'),
            "curlywedge" => Token::Operator('⋏'),
            "dotplus" => Token::Operator('∔'),
            "intercal" => Token::Operator('⊺'),
            "divideontimes" => Token::Operator('⋇'),
            "leftthreetimes" => Token::Operator('⋋'),
            "rightthreetimes" => Token::Operator('⋌'),
            "smallsetminus" => Token::Operator('﹨'),
            "triangledown" => Token::Operator('▽'),
            "triangleleft" => Token::Operator('◁'),
            "triangleright" => Token::Operator('▷'),
            "vartriangle" => Token::Operator('△'),
            "veebar" => Token::Operator('⊻'),
            "cap" => Token::Operator('∩'),
            "cup" => Token::Operator('∪'),
            "mid" => Token::Operator('\u{2223}'),
            "nmid" => Token::Operator('\u{2224}'),
            "|" => Token::Paren("\u{2225}"),
            "parallel" => Token::Operator('∥'),
            "perp" => Token::Operator('⊥'),
            "forall" => Token::Operator('∀'),
            "exists" => Token::Operator('∃'),
            "nexists" => Token::Operator('∄'),
            "lt" => Token::Operator('<'),
            "gt" => Token::Operator('>'),
            "leq" => Token::Operator('≤'),
            "geq" => Token::Operator('≥'),
            "ll" => Token::Operator('≪'),
            "gg" => Token::Operator('≫'),
            "lessapprox" => Token::Operator('⪅'),
            "lesssim" => Token::Operator('≲'),
            "eqslantless" => Token::Operator('⪕'),
            "leqslant" => Token::Operator('⩽'),
            "leqq" => Token::Operator('≦'),
            "geqq" => Token::Operator('≧'),
            "geqslant" => Token::Operator('⩾'),
            "eqslantgtr" => Token::Operator('⪖'),
            "gtrsim" => Token::Operator('≳'),
            "gtrapprox" => Token::Operator('⪆'),
            "approxeq" => Token::Operator('≊'),
            "lessdot" => Token::Operator('⋖'),
            "lll" => Token::Operator('⋘'),
            "lessgtr" => Token::Operator('≶'),
            "lesseqgtr" => Token::Operator('⋚'),
            "lesseqqgtr" => Token::Operator('⪋'),
            "doteqdot" => Token::Operator('≑'),
            "risingdotseq" => Token::Operator('≓'),
            "leftarrow" => Token::Operator('←'),
            "gets" => Token::Operator('←'),
            "rightarrow" => Token::Operator('→'),
            "to" => Token::Operator('→'),
            "nleftarrow" => Token::Operator('↚'),
            "nrightarrow" => Token::Operator('↛'),
            "leftrightarrow" => Token::Operator('↔'),
            "nleftrightarrow" => Token::Operator('↮'),
            "longleftarrow" => Token::Operator('⟵'),
            "longrightarrow" => Token::Operator('⟶'),
            "longleftrightarrow" => Token::Operator('⟷'),
            "Leftarrow" => Token::Operator('⇐'),
            "Rightarrow" => Token::Operator('⇒'),
            "nLeftarrow" => Token::Operator('⇍'),
            "nRightarrow" => Token::Operator('⇏'),
            "Leftrightarrow" => Token::Operator('⇔'),
            "nLeftrightarrow" => Token::Operator('⇎'),
            "Longleftarrow" => Token::Operator('⟸'),
            "impliedby" => Token::Operator('⟸'),
            "Longrightarrow" => Token::Operator('⟹'),
            "implies" => Token::Operator('⟹'),
            "Longleftrightarrow" => Token::Operator('⟺'),
            "iff" => Token::Operator('⟺'),
            "uparrow" => Token::Operator('↑'),
            "downarrow" => Token::Operator('↓'),
            "updownarrow" => Token::Operator('↕'),
            "Uparrow" => Token::Operator('⇑'),
            "Downarrow" => Token::Operator('⇓'),
            "Updownarrow" => Token::Operator('⇕'),
            "nearrow" => Token::Operator('↗'),
            "searrow" => Token::Operator('↘'),
            "swarrow" => Token::Operator('↙'),
            "nwarrow" => Token::Operator('↖'),
            "rightharpoonup" => Token::Operator('⇀'),
            "rightharpoondown" => Token::Operator('⇁'),
            "leftharpoonup" => Token::Operator('↼'),
            "leftharpoondown" => Token::Operator('↽'),
            "upharpoonleft" => Token::Operator('↿'),
            "upharpoonright" => Token::Operator('↾'),
            "downharpoonleft" => Token::Operator('⇃'),
            "downharpoonright" => Token::Operator('⇂'),
            "rightleftharpoons" => Token::Operator('⇌'),
            "leftrightharpoons" => Token::Operator('⇋'),
            "curvearrowleft" => Token::Operator('↶'),
            "circlearrowleft" => Token::Operator('↺'),
            "Lsh" => Token::Operator('↰'),
            "upuparrows" => Token::Operator('⇈'),
            "rightrightarrows" => Token::Operator('⇉'),
            "rightleftarrows" => Token::Operator('⇄'),
            "Rrightarrow" => Token::Operator('⇛'),
            "rightarrowtail" => Token::Operator('↣'),
            "looparrowright" => Token::Operator('↬'),
            "curvearrowright" => Token::Operator('↷'),
            "circlearrowright" => Token::Operator('↻'),
            "Rsh" => Token::Operator('↱'),
            "downdownarrows" => Token::Operator('⇊'),
            "leftleftarrows" => Token::Operator('⇇'),
            "leftrightarrows" => Token::Operator('⇆'),
            "Lleftarrow" => Token::Operator('⇚'),
            "leftarrowtail" => Token::Operator('↢'),
            "looparrowleft" => Token::Operator('↫'),
            "mapsto" => Token::Operator('↦'),
            "longmapsto" => Token::Operator('⟼'),
            "hookrightarrow" => Token::Operator('↪'),
            "hookleftarrow" => Token::Operator('↩'),
            "multimap" => Token::Operator('⊸'),
            "leftrightsquigarrow" => Token::Operator('↭'),
            "rightsquigarrow" => Token::Operator('⇝'),
            "lightning" => Token::Operator('↯'),
            "Yleft" => Token::Operator('⤙'),
            "Yright" => Token::Operator('⤚'),
            "in" => Token::Operator('\u{2208}'),
            "ni" => Token::Operator('\u{2209}'),
            "notin" => Token::Operator('\u{2209}'),
            "subset" => Token::Operator('\u{2282}'),
            "supset" => Token::Operator('\u{2283}'),
            "subseteq" => Token::Operator('\u{2286}'),
            "supseteq" => Token::Operator('\u{2287}'),
            "nsubseteq" => Token::Operator('\u{2288}'),
            "nsupseteq" => Token::Operator('\u{2289}'),
            "subsetneq" => Token::Operator('\u{228a}'),
            "supsetneq" => Token::Operator('\u{228b}'),
            "sqsubset" => Token::Operator('⊏'),
            "sqsubseteq" => Token::Operator('⊑'),
            "sqsupset" => Token::Operator('⊐'),
            "sqsupseteq" => Token::Operator('⊒'),
            "sqcap" => Token::Operator('⊓'),
            "sqcup" => Token::Operator('⊔'),
            "setminus" => Token::Operator('∖'),
            "partial" => Token::Letter('∂', None),
            "nabla" => Token::Operator('∇'),
            "smile" => Token::Operator('⌣'),
            "from" => Token::Operator('⌢'),
            "wr" => Token::Operator('≀'),
            "bot" => Token::Operator('⊥'),
            "top" => Token::Operator('⊤'),
            "vdash" => Token::Operator('⊢'),
            "vDash" => Token::Operator('⊨'),
            "Vdash" => Token::Operator('⊩'),
            "models" => Token::Operator('⊨'),
            "slashed" => Token::Slashed,
            command => Token::Command(command.to_owned()),
        }
    }
}
